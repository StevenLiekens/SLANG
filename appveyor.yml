# Notes:
#   - Minimal appveyor.yml file is an empty file. All sections are optional.
#   - Indent each level of configuration with 2 spaces. Do not use tabs!
#   - All section names are case-sensitive.
#   - Section names should be unique on each level.

#---------------------------------#
#      general configuration      #
#---------------------------------#

# version format
version: "{build}"

# you can use {branch} name in version format too
# version: 1.0.{build}-{branch}

## branches to build
#branches:
#  # whitelist
#  only:
#    - master
#
#  # blacklist
#  except:
#    - gh-pages
#
## Do not build on tags (GitHub only)
#skip_tags: false
#
## Skipping commits with particular message or from user
#skip_commits:
#  message: /Created.*\.(png|jpg|jpeg|bmp|gif)/       # Regex for matching commit message
#  author: John        # Commit author's username, name, email or regexp maching one of these.
#
#---------------------------------#
#    environment configuration    #
#---------------------------------#

# Operating system (build VM template)
os: Windows Server 2012

# scripts that are called at very beginning, before repo cloning
init:
  - ps: |
      $assembly_version = "$Env:major.0"
      $assembly_file_version = "$Env:major.$Env:minor.$Env:APPVEYOR_BUILD_NUMBER.0"

      If ($Env:CI_pack -eq "true")
      {
          $assembly_informational_version = "$Env:major.$Env:minor.$Env:patch-CI$Env:APPVEYOR_BUILD_NUMBER"
      }
      Else
      {
          $assembly_informational_version = "$Env:major.$Env:minor.$Env:patch"
      }

      Set-AppveyorBuildVariable -Name "assembly_version" -Value $assembly_version
      Set-AppveyorBuildVariable -Name "assembly_file_version" -Value $assembly_file_version
      Set-AppveyorBuildVariable -Name "assembly_informational_version" -Value $assembly_informational_version

# clone directory
clone_folder: c:\projects\textfx

# fetch repository as zip archive
#shallow_clone: true                 # default is "false"

# set clone depth
clone_depth: 5                      # clone entire repository history if not defined

# setting up etc\hosts file
#hosts:
#  queue-server: 127.0.0.1
#  db.server.com: 127.0.0.2

# environment variables
environment:
  # these variables are common to all jobs
  major: 1
  minor: 0
  patch: 0

  matrix:
  # first group
  - CI_pack: true

  # second group
  - CI_pack: false

# this is how to allow failing jobs in the matrix
#matrix:
#  fast_finish: true     # set this flag to immediately finish build once one of the jobs fails.
#  allow_failures:
#    - platform: x86
#      configuration: Debug
#    - platform: x64
#      configuration: Release

# build cache to preserve files/folders between builds
cache:
  - packages -> **\packages.config  # preserve "packages" directory in the root of build folder but will reset it if packages.config is modified
#  - projectA\libs
#  - node_modules                    # local npm modules
#  - %APPDATA%\npm-cache             # npm cache

# enable service required for build/tests
#services:
#  - mssql2014           # start SQL Server 2014 Express
#  - mssql2014rs         # start SQL Server 2014 Express and Reporting Services
#  - mssql2012sp1        # start SQL Server 2012 SP1 Express
#  - mssql2012sp1rs      # start SQL Server 2012 SP1 Express and Reporting Services
#  - mssql2008r2sp2      # start SQL Server 2008 R2 SP2 Express
#  - mssql2008r2sp2rs    # start SQL Server 2008 R2 SP2 Express and Reporting Services
#  - mysql               # start MySQL 5.6 service
#  - postgresql          # start PostgreSQL 9.3 service
#  - iis                 # start IIS
#  - msmq                # start Queuing services

# scripts that run after cloning repository
#install:
#  # by default, all script lines are interpreted as batch
#  - echo This is batch
#  # to run script as a PowerShell command prepend it with ps:
#  - ps: Write-Host 'This is PowerShell'
#  # batch commands start from cmd:
#  - cmd: echo This is batch again
#  - cmd: set MY_VAR=12345

# enable patching of AssemblyInfo.* files
assembly_info:
  patch: true
  file: SharedAssemblyInfo.*
  assembly_version: "$(assembly_version)"
  assembly_file_version: "$(assembly_file_version)"
  assembly_informational_version: "$(assembly_informational_version)"


# Automatically register private account and/or project AppVeyor NuGet feeds.
#nuget:
#  account_feed: true
#  project_feed: true
#  disable_publish_on_pr: true     # disable publishing of .nupkg artifacts to
#                                  # account/project feeds for pull request builds

#---------------------------------#
#       build configuration       #
#---------------------------------#

# build platform, i.e. x86, x64, Any CPU. This setting is optional.
#platform: AnyCPU

# to add several platforms to build matrix:
#platform:
#  - x86
#  - Any CPU

# build Configuration, i.e. Debug, Release, etc.
#configuration: Release

# to add several configurations to build matrix:
#configuration:
#  - Debug
#  - Release
#
#build:
#  parallel: true                  # enable MSBuild parallel builds
#  project: MyTestAzureCS.sln      # path to Visual Studio solution or project
#  publish_wap: true               # package Web Application Projects (WAP) for Web Deploy
#  publish_wap_xcopy: true         # package Web Application Projects (WAP) for XCopy deployment
#  publish_azure: true             # package Azure Cloud Service projects and push to artifacts
#  publish_nuget: true             # package projects with .nuspec files and push to artifacts
#  publish_nuget_symbols: true     # generate and publish NuGet symbol packages
#  include_nuget_references: true  # add -IncludeReferencedProjects option while packaging NuGet artifacts

before_build:
   - cmd: nuget restore

build_script:
    - ps: MSBuild.exe /m /p:Configuration=Release /p:Platform=AnyCPU /p:OutDir=$Env:APPVEYOR_BUILD_FOLDER\artifacts /logger:"C:\Program Files\AppVeyor\BuildAgent\Appveyor.MSBuildLogger.dll" /p:GenerateProjectSpecificOutputFolder=true /verbosity:m build.proj

after_build:
    - ps: Get-ChildItem -Path $Env:APPVEYOR_BUILD_FOLDER\artifacts -Recurse -Include *.nupkg | ForEach-Object { appveyor PushArtifact $_.FullName }

# to disable automatic builds
#build: off

#---------------------------------#
#       tests configuration       #
#---------------------------------#

#test:
#  assemblies:
#    - asm1.dll
#    - asm2.dll
#
#  categories:
#    - UI
#    - E2E

# to run tests from different categories as separate jobs in parallel
#test:
#  categories:
#    - A            # A category common for all jobs
#    - [UI]         # 1st job
#    - [DAL, BL]    # 2nd job

# scripts to run before tests
#before_test:
#  - echo script1
#  - ps: Write-Host "script1"
#
# scripts to run after tests
#after_test:

# to run your custom scripts instead of automatic tests
#test_script:
#  - echo This is my custom test script

# to disable automatic tests 
#test: off


#---------------------------------#
#      artifacts configuration    #
#---------------------------------#

#artifacts:

#  # pushing a single file
#  - path: test.zip
#
#  # pushing a single file with environment variable in path and "Deployment name" specified
#  - path: MyProject\bin\$(configuration)
#    name: myapp
#
#  # pushing entire folder as a zip archive
#  - path: logs
#
#  # pushing all *.nupkg files in directory
#  - path: out\*.nupkg


#---------------------------------#
#     deployment configuration    #
#---------------------------------#

# providers: Local, FTP, WebDeploy, AzureCS, AzureBlob, S3, NuGet, Environment
# provider names are case-sensitive!
#deploy:

    # Deploying to NuGet feed
#  - provider: NuGet
#    server: https://my.nuget.server/feed
#    api_key:
#      secure: FYWX6NfjZIVw==
#    skip_symbols: false
#    symbol_server: https://your.symbol.server/feed
#    artifact: MyPackage.nupkg

    # Deploy to GitHub Releases
#  - provider: GitHub
#    artifact: /.*\.nupkg/           # upload all NuGet packages to release assets
#    draft: false
#    prerelease: false
#    on:
#      branch: master                # release from master branch only
#      appveyor_repo_tag: true       # deploy on tag push only

# scripts to run before deployment
#before_deploy:

# scripts to run after deployment
#after_deploy:

# to run your custom scripts instead of provider deployments
#deploy_script:

# to disable deployment
#deploy: off

#---------------------------------#
#        global handlers          #
#---------------------------------#

# on successful build
#on_success:
#  - do something

# on build failure
#on_failure:
#  - do something

# after build failure or success
#on_finish:
#  - do something